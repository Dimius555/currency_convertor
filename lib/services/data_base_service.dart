import 'dart:async';
import 'dart:developer';

import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';
import 'package:sembast/sembast.dart';
import 'package:sembast/sembast_io.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î.
class DatabaseService {
  static DatabaseService? _db;
  static DatabaseService get instance => _db ??= DatabaseService();

  /// –í–µ—Ä—Å–∏—è –ë–î
  /// 1 - –∏—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è
  static const int _currentDbVersion = 1;

  Completer<Database>? _dbOpenCompleter;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–î
  Future<Database> get database async {
    if (_dbOpenCompleter == null) {
      _dbOpenCompleter = Completer();
      await _openDatabase();
    }
    return _dbOpenCompleter!.future;
  }

  Future _openDatabase() async {
    try {
      final appDocumentDir = await getApplicationDocumentsDirectory();
      final dbPath = path.join(appDocumentDir.path, 'CurrenciesDB.db');
      // –¢–∞–∫ –∫–∞–∫ –ë–î —Ç–æ–ª—å–∫–æ 1 –≤–µ—Ä—Å–∏–∏, —Ç–æ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      // –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–µ—Ä—Å–∏—é –∏ –¥–µ–ª–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
      final database = await databaseFactoryIo.openDatabase(dbPath, version: _currentDbVersion);

      _dbOpenCompleter!.complete(database);
      log('‚úÖ DB is Activated!');
    } catch (e) {
      log('üî• DB activation is failed: $e');
    }
  }
}
